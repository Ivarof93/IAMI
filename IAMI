import pandas as pd
from tkinter import Tk, filedialog
from openpyxl import Workbook
from openpyxl.styles import Alignment, Font, PatternFill, Border, Side


# Función para categorizar la edad en rangos
def categorize_age(age):
    if 10 <= age <= 14:
        return "10-14"
    elif 15 <= age <= 19:
        return "15-19"
    elif 20 <= age <= 24:
        return "20-24"
    elif 25 <= age <= 29:
        return "25-29"
    else:
        return "Otro"

# Abrir el explorador de archivos y seleccionar el archivo Excel
root = Tk()
root.withdraw()  # Ocultar la ventana principal
input_file_path = filedialog.askopenfilename(filetypes=[("Excel files", "*.xlsx")])
output_file_path = filedialog.asksaveasfilename(defaultextension=".xlsx", filetypes=[("Excel files", "*.xlsx")])
root.destroy()

# Leer el archivo Excel
data = pd.read_excel(input_file_path)

# Crear un nuevo archivo Excel
workbook = Workbook()

def consulta_del_joven():
    consult_sheet = workbook.create_sheet("Consulta del joven")

    # Función para categorizar el régimen
    def categorize_regime(regime):
        if "CONTRIBUTIVO" in regime:
            return "CONTRIBUTIVO"
        else:
            return "SUBSIDIADO"

    # Función para categorizar el procedimiento
    def categorize_procedure(procedure):
        if procedure == "ADOLESCENCIA - PRIMERA VEZ  POR MEDICO":
            return "PRIMERA VEZ"
        else:
            return "CONTROL"


    # Filtrar los datos para los procedimientos específicos
    filtered_data = data[data['nomprocedimiento'].isin(["ADOLESCENCIA - CONSULTA DE CONTROL POR ENFERMERIA",
                                                        "ADOLESCENCIA - CONSULTA DE CONTROL POR MEDICO",
                                                        "ADOLESCENCIA - PRIMERA VEZ  POR MEDICO",
                                                        "JUVENTUD - CONSULTA DE CONTROL POR MEDICO"])]


    # Aplicar las funciones de categorización a las columnas
    filtered_data = filtered_data.assign(
        Sexo=filtered_data['codsexo'].apply(lambda x: "Hombre" if x == 1 else "Mujer"),
        Edad=filtered_data['EDAD'].apply(categorize_age),
        Régimen=filtered_data['nomempresa'].apply(categorize_regime),
        Frecuencia=filtered_data['nomprocedimiento'].apply(categorize_procedure)
    )

    # Filtrar los datos para PRIMERA VEZ y CONTROL
    # Filtrar los datos para PRIMERA VEZ y CONTROL
    primera_vez_data = filtered_data[filtered_data['Frecuencia'] == 'PRIMERA VEZ']
    control_data = filtered_data[filtered_data['Frecuencia'] == 'CONTROL']


    # Escribir encabezados de edades y sexos
    ages = ['10-14', '15-19', '20-24', '25-29']
    sexes = ['Hombre', 'Mujer']
    consult_sheet.cell(row=2, column=2, value='PRIMERA VEZ').alignment = Alignment(horizontal='center')
    consult_sheet.merge_cells(start_row=2, start_column=2, end_row=2, end_column=9)

    # Escribir encabezado 10-14
    consult_sheet.cell(row=3, column=2, value='10-14').alignment = Alignment(horizontal='center')
    consult_sheet.merge_cells(start_row=3, start_column=2, end_row=3, end_column=3)

    # Escribir encabezado 15-19
    consult_sheet.cell(row=3, column=4, value='15-19').alignment = Alignment(horizontal='center')
    consult_sheet.merge_cells(start_row=3, start_column=4, end_row=3, end_column=5)

    # Escribir encabezado 20-24
    consult_sheet.cell(row=3, column=6, value='20-24').alignment = Alignment(horizontal='center')
    consult_sheet.merge_cells(start_row=3, start_column=6, end_row=3, end_column=7)

    # Escribir encabezado 25-29
    consult_sheet.cell(row=3, column=8, value='25-29').alignment = Alignment(horizontal='center')
    consult_sheet.merge_cells(start_row=3, start_column=8, end_row=3, end_column=9)

    # Escribir encabezado HOMBRE
    consult_sheet.cell(row=4, column=2, value='HOMBRE').alignment = Alignment(horizontal='center')
    consult_sheet.cell(row=4, column=4, value='HOMBRE').alignment = Alignment(horizontal='center')
    consult_sheet.cell(row=4, column=6, value='HOMBRE').alignment = Alignment(horizontal='center')
    consult_sheet.cell(row=4, column=8, value='HOMBRE').alignment = Alignment(horizontal='center')
    consult_sheet.cell(row=11, column=2, value='HOMBRE').alignment = Alignment(horizontal='center')
    consult_sheet.cell(row=11, column=4, value='HOMBRE').alignment = Alignment(horizontal='center')
    consult_sheet.cell(row=11, column=6, value='HOMBRE').alignment = Alignment(horizontal='center')
    consult_sheet.cell(row=11, column=8, value='HOMBRE').alignment = Alignment(horizontal='center')

    # Escribir encabezado MUJER
    consult_sheet.cell(row=4, column=3, value='MUJER').alignment = Alignment(horizontal='center')
    consult_sheet.cell(row=4, column=5, value='MUJER').alignment = Alignment(horizontal='center')
    consult_sheet.cell(row=4, column=7, value='MUJER').alignment = Alignment(horizontal='center')
    consult_sheet.cell(row=4, column=9, value='MUJER').alignment = Alignment(horizontal='center')
    consult_sheet.cell(row=11, column=3, value='MUJER').alignment = Alignment(horizontal='center')
    consult_sheet.cell(row=11, column=5, value='MUJER').alignment = Alignment(horizontal='center')
    consult_sheet.cell(row=11, column=7, value='MUJER').alignment = Alignment(horizontal='center')
    consult_sheet.cell(row=11, column=9, value='MUJER').alignment = Alignment(horizontal='center')


    # Crear estilo para celdas de encabezados con fondo azul suave y letras blancas en negrilla
    header_fill = PatternFill(start_color="B0C4DE", end_color="B0C4DE", fill_type="solid")
    white_bold_font = Font(color="FFFFFF", bold=True)

    # Crear estilo para celdas con bordes
    border_style = Border(
        left=Side(border_style="thin", color="000000"),
        right=Side(border_style="thin", color="000000"),
        top=Side(border_style="thin", color="000000"),
        bottom=Side(border_style="thin", color="000000")
    )


    # Aplicar estilo a las celdas de encabezados
    for col in consult_sheet.iter_cols(min_row=2, max_row=4, min_col=2, max_col=9):
        for cell in col:
            cell.fill = header_fill
            cell.alignment = Alignment(horizontal="center")
            cell.font = white_bold_font

    # Aplicar estilo a las celdas de primera columna
    for col in consult_sheet.iter_cols(min_row=2, max_row=6, min_col=1, max_col=1):
        for cell in col:
            cell.fill = header_fill
            cell.alignment = Alignment(horizontal="center")
            cell.font = white_bold_font
            consult_sheet.column_dimensions[cell.column_letter].width = 15  # Autoajustar el ancho de la columna

    # Aplicar estilo a las celdas con bordes
    for row in consult_sheet.iter_rows(min_row=2, max_row=6, min_col=1, max_col=9):
        for cell in row:
            cell.border = border_style

    # Llenar la tabla PRIMERA VEZ
    for row, regime in enumerate(['CONTRIBUTIVO', 'SUBSIDIADO'], start=5):
        consult_sheet.cell(row=row, column=1, value=regime)
        col = 2
        for age in ages:
            for sex in sexes:
                count = primera_vez_data[
                    (primera_vez_data['Régimen'] == regime) &
                    (primera_vez_data['Edad'] == age) &
                    (primera_vez_data['Sexo'] == sex)
                ]['Frecuencia'].count()
                consult_sheet.cell(row=row, column=col, value=count)
                col += 1

    # Escribir encabezado CONTROL
    consult_sheet.merge_cells('B9:I9')
    consult_sheet.cell(row=9, column=2, value='CONTROL').alignment = Alignment(horizontal='center')

    # Escribir encabezado 10-14
    consult_sheet.cell(row=10, column=2, value='10-14').alignment = Alignment(horizontal='center')
    consult_sheet.merge_cells(start_row=10, start_column=2, end_row=10, end_column=3)

    # Escribir encabezado 15-19
    consult_sheet.cell(row=10, column=4, value='15-19').alignment = Alignment(horizontal='center')
    consult_sheet.merge_cells(start_row=10, start_column=4, end_row=10, end_column=5)

    # Escribir encabezado 20-24
    consult_sheet.cell(row=10, column=6, value='20-24').alignment = Alignment(horizontal='center')
    consult_sheet.merge_cells(start_row=10, start_column=6, end_row=10, end_column=7)

    # Escribir encabezado 25-29
    consult_sheet.cell(row=10, column=8, value='25-29').alignment = Alignment(horizontal='center')
    consult_sheet.merge_cells(start_row=10, start_column=8, end_row=10, end_column=9)


    # Aplicar estilo a las celdas de encabezados en la tabla CONTROL
    for col in consult_sheet.iter_cols(min_row=9, max_row=11, min_col=2, max_col=9):
        for cell in col:
            cell.fill = header_fill
            cell.alignment = Alignment(horizontal="center")
            cell.font = white_bold_font

    # Aplicar estilo a las celdas de primera columna en la tabla CONTROL
    for col in consult_sheet.iter_cols(min_row=9, max_row=13, min_col=1, max_col=1):
        for cell in col:
            cell.fill = header_fill
            cell.alignment = Alignment(horizontal="center")
            cell.font = white_bold_font
            consult_sheet.column_dimensions[cell.column_letter].width = 15  # Autoajustar el ancho de la columna

    # Aplicar estilo a las celdas con bordes
    for row in consult_sheet.iter_rows(min_row=9, max_row=13, max_col=9):
        for cell in row:
            cell.border = border_style


    # Llenar la tabla CONTROL
    for row, regime in enumerate(['CONTRIBUTIVO', 'SUBSIDIADO'], start=12):
        consult_sheet.cell(row=row, column=1, value=regime)
        col = 2
        for age in ages:
            for sex in sexes:
                count = control_data[
                    (control_data['Régimen'] == regime) &
                    (control_data['Edad'] == age) &
                    (control_data['Sexo'] == sex)
                ]['Frecuencia'].count()
                consult_sheet.cell(row=row, column=col, value=count)
                col += 1



#============================================================================================================================================================================================

def citologia():
    consult_sheet = workbook.create_sheet("Citología")
    # Función para categorizar el régimen
    def categorize_regime(regime):
        if "CONTRIBUTIVO" in regime:
            return "CONTRIBUTIVO"
        else:
            return "SUBSIDIADO"


    # Filtrar los datos para los procedimientos específicos
    filtered_data_1 = data[data['nomprocedimiento'].isin(["CCU - ESTUDIO  CITOLOGIA CERVICO UTERINA"])]


    # Aplicar las funciones de categorización a las columnas
    filtered_data_1 = filtered_data_1.assign(
        Edad=filtered_data_1['EDAD'].apply(categorize_age),
        Régimen=filtered_data_1['nomempresa'].apply(categorize_regime)
    )

    # Escribir encabezados de edades y sexos
    ages = ['10-14', '15-19', '20-24', '25-29']
    sexes = ['Hombre', 'Mujer']
    consult_sheet.cell(row=2, column=2, value='CITOLOGÍA').alignment = Alignment(horizontal='center')
    consult_sheet.merge_cells(start_row=2, start_column=2, end_row=2, end_column=5)

    # Escribir encabezado 10-14
    consult_sheet.cell(row=3, column=2, value='10-14').alignment = Alignment(horizontal='center')
    consult_sheet.merge_cells(start_row=3, start_column=2, end_row=3, end_column=2)

    # Escribir encabezado 15-19
    consult_sheet.cell(row=3, column=3, value='15-19').alignment = Alignment(horizontal='center')
    consult_sheet.merge_cells(start_row=3, start_column=3, end_row=3, end_column=3)

    # Escribir encabezado 20-24
    consult_sheet.cell(row=3, column=4, value='20-24').alignment = Alignment(horizontal='center')
    consult_sheet.merge_cells(start_row=3, start_column=4, end_row=3, end_column=4)

    # Escribir encabezado 25-29
    consult_sheet.cell(row=3, column=5, value='25-29').alignment = Alignment(horizontal='center')
    consult_sheet.merge_cells(start_row=3, start_column=5, end_row=3, end_column=5)


    # Escribir encabezado MUJER
    consult_sheet.cell(row=4, column=2, value='MUJER').alignment = Alignment(horizontal='center')
    consult_sheet.cell(row=4, column=3, value='MUJER').alignment = Alignment(horizontal='center')
    consult_sheet.cell(row=4, column=4, value='MUJER').alignment = Alignment(horizontal='center')
    consult_sheet.cell(row=4, column=5, value='MUJER').alignment = Alignment(horizontal='center')


    # Crear estilo para celdas de encabezados con fondo azul suave y letras blancas en negrilla
    header_fill = PatternFill(start_color="B0C4DE", end_color="B0C4DE", fill_type="solid")
    white_bold_font = Font(color="FFFFFF", bold=True)

    # Crear estilo para celdas con bordes
    border_style = Border(
        left=Side(border_style="thin", color="000000"),
        right=Side(border_style="thin", color="000000"),
        top=Side(border_style="thin", color="000000"),
        bottom=Side(border_style="thin", color="000000")
    )


    # Aplicar estilo a las celdas de encabezados
    for col in consult_sheet.iter_cols(min_row=2, max_row=4, min_col=2, max_col=5):
        for cell in col:
            cell.fill = header_fill
            cell.alignment = Alignment(horizontal="center")
            cell.font = white_bold_font

    # Aplicar estilo a las celdas de primera columna
    for col in consult_sheet.iter_cols(min_row=2, max_row=6, min_col=1, max_col=1):
        for cell in col:
            cell.fill = header_fill
            cell.alignment = Alignment(horizontal="center")
            cell.font = white_bold_font
            consult_sheet.column_dimensions[cell.column_letter].width = 15  # Autoajustar el ancho de la columna

    # Aplicar estilo a las celdas con bordes
    for row in consult_sheet.iter_rows(min_row=2, max_row=6, min_col=1, max_col=5):
        for cell in row:
            cell.border = border_style

    # Llenar la tabla PRIMERA VEZ
    for row, regime in enumerate(['CONTRIBUTIVO', 'SUBSIDIADO'], start=5):
        consult_sheet.cell(row=row, column=1, value=regime)
        col = 2
        for age in ages:

                count = filtered_data_1[
                    (filtered_data_1['Régimen'] == regime) &
                    (filtered_data_1['Edad'] == age)
                    ].shape[0]  # Utilizamos .shape[0] para contar las filas
                consult_sheet.cell(row=row, column=col, value=count)
                col += 1

# Llamada a la función para generar las tablas
consulta_del_joven()
# Llamada a la función para generar las tablas
citologia()

# Guardar el archivo Excel
workbook.save(output_file_path)
print(f"Tablas creadas y guardadas en {output_file_path}")
